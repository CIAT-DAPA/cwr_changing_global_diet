return(Map(sqrt_newton, numbers, init, eps))
}
sqrt_newton_vec(numbers, 1)})
profvis::profvis({sqrt_newton <- function(a, init, eps = 0.01){
while(abs(init**2 - a) > eps){
init <- 1/2 *(init + a/init)
}
return(init)
}
sqrt_newton(a = 16, init = 2)
# Apply this function to a vector of numbers
# Option 1: returns a vector with the answers but also warning messages
numbers <- c(16, 25, 36, 49, 64, 81)
sqrt_newton(numbers, init = rep(1, 6), eps = rep(0.001, 6))
# Option 2: returns a list with the answers without errors
Map(sqrt_newton, numbers, init = 1)
# Map() applies a function to every element of a list and returns a list
# Option 3
sqrt_newton_vec <- function(numbers, init, eps = 0.01){
return(Map(sqrt_newton, numbers, init, eps))
}
sqrt_newton_vec(numbers, 1)})
profvis::profvis({# Apply this function to a vector of numbers
# Option 1: returns a vector with the answers but also warning messages
numbers <- c(16, 25, 36, 49, 64, 81)
sqrt_newton(numbers, init = rep(1, 6), eps = rep(0.001, 6))
# Option 2: returns a list with the answers without errors
Map(sqrt_newton, numbers, init = 1)
# Map() applies a function to every element of a list and returns a list
# Option 3
sqrt_newton_vec <- function(numbers, init, eps = 0.01){
return(Map(sqrt_newton, numbers, init, eps))
}
sqrt_newton_vec(numbers, 1)})
lapply(numbers, sqrt_newton, init = 1)
sapply(numbers, sqrt_newton, init = 1)
sqrt_newton_vec <- function(numbers, init, eps = 0.01){
return(sapply(numbers, sqrt_newton, init, eps))
}
sqrt_newton_vec(numbers, 1)
inits <- c(100, 20, 3212, 487, 5, 9888)
mapply(sqrt_newton, numbers, init = inits)
Reduce(`+`, numbers, init = 0)
sum(numbers)
Reduce(my_min, numbers)
my_min <- function(a, b){
if(a < b){
return(a)
} else {
return(b)
}
}
Reduce(my_min, numbers)
min(numbers)
profvis::profvis({sqrt_newton <- function(a, init, eps = 0.01){
while(abs(init**2 - a) > eps){
init <- 1/2 *(init + a/init)
}
return(init)
}
sqrt_newton(a = 16, init = 2)
## Map() uses
# Apply this function to a vector of numbers
# Option 1: returns a vector with the answers but also warning messages
numbers <- c(16, 25, 36, 49, 64, 81)
sqrt_newton(numbers, init = rep(1, 6), eps = rep(0.001, 6))
# Option 2: returns a list with the answers without errors
Map(sqrt_newton, numbers, init = 1)
# Map() applies a function to every element of a list and returns a list
# Option 3
sqrt_newton_vec <- function(numbers, init, eps = 0.01){
return(Map(sqrt_newton, numbers, init, eps))
}
sqrt_newton_vec(numbers, 1)
# Option 4
lapply(numbers, sqrt_newton, init = 1)
# Option 5
sapply(numbers, sqrt_newton, init = 1)
# Option 6
sqrt_newton_vec <- function(numbers, init, eps = 0.01){
return(sapply(numbers, sqrt_newton, init, eps))
}
sqrt_newton_vec(numbers, 1)
# Option 7
inits <- c(100, 20, 3212, 487, 5, 9888)
mapply(sqrt_newton, numbers, init = inits)})
profvis::profvis({sqrt_newton <- function(a, init, eps = 0.01){
while(abs(init**2 - a) > eps){
init <- 1/2 *(init + a/init)
}
return(init)
}
sqrt_newton(a = 16, init = 2)
## Map() uses
# Apply this function to a vector of numbers
# Option 1: returns a vector with the answers but also warning messages
numbers <- c(16, 25, 36, 49, 64, 81)
sqrt_newton(numbers, init = rep(1, 6), eps = rep(0.001, 6))
# Option 2: returns a list with the answers without errors
Map(sqrt_newton, numbers, init = 1)
# Map() applies a function to every element of a list and returns a list
# Option 3
sqrt_newton_vec <- function(numbers, init, eps = 0.01){
return(Map(sqrt_newton, numbers, init, eps))
}
sqrt_newton_vec(numbers, 1)
# Option 4
lapply(numbers, sqrt_newton, init = 1)
# Option 5
sapply(numbers, sqrt_newton, init = 1)
# Option 6
sqrt_newton_vec <- function(numbers, init, eps = 0.01){
return(sapply(numbers, sqrt_newton, init, eps))
}
sqrt_newton_vec(numbers, 1)
# Option 7
inits <- c(100, 20, 3212, 487, 5, 9888)
mapply(sqrt_newton, numbers, init = inits)})
profvis::profvis({sqrt_newton <- function(a, init, eps = 0.01){
while(abs(init**2 - a) > eps){
init <- 1/2 *(init + a/init)
}
return(init)
}
sqrt_newton(a = 16, init = 2)
## Map() uses
# Apply this function to a vector of numbers
# Option 1: returns a vector with the answers but also warning messages
numbers <- c(16, 25, 36, 49, 64, 81)
res <- sqrt_newton(numbers, init = rep(1, 6), eps = rep(0.001, 6))
# Option 2: returns a list with the answers without errors
res <- Map(sqrt_newton, numbers, init = 1)
# Map() applies a function to every element of a list and returns a list
# Option 3
sqrt_newton_vec <- function(numbers, init, eps = 0.01){
return(Map(sqrt_newton, numbers, init, eps))
}
res <- sqrt_newton_vec(numbers, 1)
# Option 4
res <- lapply(numbers, sqrt_newton, init = 1)
# Option 5
res <- sapply(numbers, sqrt_newton, init = 1)
# Option 6
sqrt_newton_vec <- function(numbers, init, eps = 0.01){
return(sapply(numbers, sqrt_newton, init, eps))
}
res <- sqrt_newton_vec(numbers, 1)
# Option 7
inits <- c(100, 20, 3212, 487, 5, 9888)
res <- mapply(sqrt_newton, numbers, init = inits)})
sqrt_newton(4, 1)
options(warn = -1)
options(scipen = 999)
suppressMessages(library(testthat))
test_that("Test sqrt_newton: positive numeric",{
expected <- 2 # Define the result we expect
actual <- sqrt_newton(4, 1) # Code to test
expect_equal(expected, actual) # Compare
})
test_that("Test sqrt_newton: positive numeric",{
eps <- 0.001
expected <- 2
actual <- sqrt_newton(4, 1, eps = eps)
expect_lt(abs(expected - actual), eps)
})
test_that("Test sqrt_newton: negative numeric",{
expect_error(sqrt_newton(-4, 1))
})
sqrt_newton <- function(a, init, eps = 0.01){
stopifnot(a >= 0)
while(abs(init**2 - a) > eps){
init <- 1/2 *(init + a/init)
}
return(init)
}
test_that("Test sqrt_newton: negative numeric",{
expect_error(sqrt_newton(-4, 1))
})
sqrt_newton(49, 1E100000, 1E-100000)
sqrt_newton <- function(a, init, eps = 0.01){
stopifnot(a >= 0)
i <- 1
while(abs(init**2 - a) > eps){
init <- 1/2 *(init + a/init)
i <- i + 1
if(i > 100) stop("Maximum number of iterations reached")
}
return(init)
}
sqrt_newton(49, 1E100, 1E-100)
sqrt_newton <- function(a, init, eps = 0.01, iter = 100){
stopifnot(a >= 0)
i <- 1
while(abs(init**2 - a) > eps){
init <- 1/2 *(init + a/init)
i <- i + 1
if(i > iter) stop("Maximum number of iterations reached")
}
return(init)
}
test_that("Test sqrt_newton: not enough iterations",{
expect_error(sqrt_newton(4, 1E100, 1E-100, iter = 100))
})
test_file('GitHub/r_scripts/testingFunctions.R')
test_file('GitHub/r_scripts/testingFunctions.R')
source('~/GitHub/cwr_changing_global_diet/r_script/chDiets_data.R', echo=TRUE)
shiny::runApp('C:/Users/haachicanoy/Desktop')
# R options
options(warn = -1)
options(scipen = 999)
# load packages
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(ggplot2))
suppressMessages(library(caroline))
suppressMessages(library(purrr))
suppressMessages(library(broom))
suppressMessages(library(ggplot2))
suppressMessages(library(epanetReader))
suppressMessages(library(ff))
suppressMessages(library(ffbase))
# load global diet data
# It's better to use Sara's data: CropData_longform.rpt (PENDING)
all_data <- read.csv('all_1961_2009_final_analysis_data_final_2016_10_28.csv')
# load food groups
gFood <- read.csv('FBS_commodities_foodgroups_regions_finaltest.csv')
gFood <- gFood %>% dplyr::select(Item:food_group) %>% unique
# merging global diet and food groups data
all_data2 <- dplyr::left_join(all_data, gFood, by=c('Item'))
rm(all_data, gFood)
# reshape dataset
all_data2 <- all_data2 %>% tidyr::gather(Year, Value, Y1961:Y2009)
all_data2$Year <- as.numeric(gsub(pattern='Y', replacement='', x=all_data2$Year))
setwd("~/GitHub/cwr_changing_global_diet/r_script/data")
# R options
options(warn = -1)
options(scipen = 999)
# load packages
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(ggplot2))
suppressMessages(library(caroline))
suppressMessages(library(purrr))
suppressMessages(library(broom))
suppressMessages(library(ggplot2))
suppressMessages(library(epanetReader))
suppressMessages(library(ff))
suppressMessages(library(ffbase))
# load global diet data
# It's better to use Sara's data: CropData_longform.rpt (PENDING)
all_data <- read.csv('all_1961_2009_final_analysis_data_final_2016_10_28.csv')
# load food groups
gFood <- read.csv('FBS_commodities_foodgroups_regions_finaltest.csv')
gFood <- gFood %>% dplyr::select(Item:food_group) %>% unique
# merging global diet and food groups data
all_data2 <- dplyr::left_join(all_data, gFood, by=c('Item'))
rm(all_data, gFood)
# reshape dataset
all_data2 <- all_data2 %>% tidyr::gather(Year, Value, Y1961:Y2009)
all_data2$Year <- as.numeric(gsub(pattern='Y', replacement='', x=all_data2$Year))
all_world <- all_data2 %>% group_by(Item, Element, Unit, food_group, Year) %>% summarise(sum(Value, na.rm = TRUE))
colnames(all_world)[ncol(all_world)] <- 'Value'
all_world$Item <- as.character(all_world$Item)
all_world$Element <- as.character(all_world$Element)
all_world$Unit <- as.character(all_world$Unit)
all_world$food_group <- as.character(all_world$food_group)
all_world$Value <- round(all_world$Value, 1)
all_world$gFood <- NA
all_world$gFood[grep(pattern = 'Cereals', x = all_world$food_group, fixed = TRUE)] <- 'cereals'
all_world$gFood[grep(pattern = 'Animal products', x = all_world$food_group, fixed = TRUE)] <- 'animal'
all_world$gFood[grep(pattern = 'Starchy roots', x = all_world$food_group, fixed = TRUE)] <- 'roots'
all_world$gFood[grep(pattern = 'Oilcrops', x = all_world$food_group, fixed = TRUE)] <- 'oilcrops'
all_world$gFood[grep(pattern = 'Sugarcrops', x = all_world$food_group, fixed = TRUE)] <- 'sugarcrops'
all_world <- all_world[complete.cases(all_world),]; rownames(all_world) <- 1:nrow(all_world)
all_world$Columns <- paste(all_world$gFood, '_', gsub(pattern = ' ', replacement = '_', x = all_world$Item, fixed = TRUE), sep = '')
all_world$Columns <- gsub(pattern = ',', replacement = '', x = all_world$Columns, fixed = TRUE)
calories <- all_world %>% filter(Element == 'Food supply (kcal/capita/day)')
calories <- as.data.frame(calories)
calories <- calories %>% select(c(5,6,8))
calories <- calories %>% spread(key = Columns, value = Value)
colnames(calories)[1] <- 'year'
all_data2 <- all_data2 %>% mutate(year1960 = Year - 1960)
all_data2 <- all_data2 %>%
filter(Item == "Animal Products (Total)")
by_country <- all_data2 %>%
group_by(Element, Country) %>%
nest()
country_model <- function(df){
lm(Value ~ year1960, data=df)
}
models <- by_country %>%
mutate(
model = data %>% map(country_model)
)
models
models <- models %>%
mutate(
glance  = model %>% map(broom::glance),
rsq     = glance %>% map_dbl("r.squared"),
tidy    = model %>% map(broom::tidy),
augment = model %>% map(broom::augment)
)
models
models %>% arrange(desc(rsq))
models %>%
ggplot(aes(rsq, reorder(Country, rsq))) +
geom_point(aes(colour = Element)) + theme_dark()
models %>%
unnest(tidy) %>%
dplyr::select(Element, Country, term, estimate, rsq) %>%
spread(term, estimate) %>%
ggplot(aes(`(Intercept)`, year1960)) +
geom_point(aes(colour = Element, size = rsq)) +
geom_smooth(se = FALSE) +
xlab("Animal products consumption") +
ylab("Yearly improvement") +
scale_size_area()
models %>%
unnest(augment) %>%
ggplot(aes(year1960, .resid)) +
geom_line(aes(group = Country), alpha = 1/3) +
geom_smooth(se = FALSE) +
geom_hline(yintercept = 0, colour = "white") +
facet_wrap(~Element)
unique(all_data2$food_group)
levels(all_data2$food_group)
# R options
options(warn = -1)
options(scipen = 999)
# load packages
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(ggplot2))
suppressMessages(library(caroline))
suppressMessages(library(purrr))
suppressMessages(library(broom))
suppressMessages(library(ggplot2))
suppressMessages(library(epanetReader))
suppressMessages(library(ff))
suppressMessages(library(ffbase))
# load global diet data
# It's better to use Sara's data: CropData_longform.rpt (PENDING)
all_data <- read.csv('all_1961_2009_final_analysis_data_final_2016_10_28.csv')
# load food groups
gFood <- read.csv('FBS_commodities_foodgroups_regions_finaltest.csv')
gFood <- gFood %>% dplyr::select(Item:food_group) %>% unique
# merging global diet and food groups data
all_data2 <- dplyr::left_join(all_data, gFood, by=c('Item'))
rm(all_data, gFood)
# reshape dataset
all_data2 <- all_data2 %>% tidyr::gather(Year, Value, Y1961:Y2009)
all_data2$Year <- as.numeric(gsub(pattern='Y', replacement='', x=all_data2$Year))
unique(as.character(all_data2$food_group))
g = gc()
rm(list=ls())
# R options
options(warn = -1)
options(scipen = 999)
# load packages
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(ggplot2))
suppressMessages(library(caroline))
suppressMessages(library(purrr))
suppressMessages(library(broom))
suppressMessages(library(ggplot2))
suppressMessages(library(epanetReader))
suppressMessages(library(ff))
suppressMessages(library(ffbase))
# load global diet data
# It's better to use Sara's data: CropData_longform.rpt (PENDING)
all_data <- read.csv('all_1961_2009_final_analysis_data_final_2016_10_28.csv')
# load food groups
gFood <- read.csv('FBS_commodities_foodgroups_regions_finaltest.csv')
gFood <- gFood %>% dplyr::select(Item:food_group) %>% unique
# merging global diet and food groups data
all_data2 <- dplyr::left_join(all_data, gFood, by=c('Item'))
rm(all_data, gFood)
# reshape dataset
all_data2 <- all_data2 %>% tidyr::gather(Year, Value, Y1961:Y2009)
all_data2$Year <- as.numeric(gsub(pattern='Y', replacement='', x=all_data2$Year))
all_data3 <- all_data2
all_data3$Item <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = all_data3$Item)
all_data3$Item <- tolower(gsub(pattern = ' ', replacement = '_', x = all_data3$Item))
all_data3$Country <- as.character(all_data3$Country)
all_data3$Country[grep(pattern = "Côte d'Ivoire", x = all_data3$Country, fixed = TRUE)] <- 'Ivory Coast'
all_data3$Item <- tolower(gsub(pattern = ',', replacement = '', x = all_data3$Item))
unique(as.character(all_data3$Item))
measures <- all_data3$Element %>% unique %>% as.character
nicerNms <- c('fat', 'calories', 'food_quantity', 'protein')
lapply(1:length(measures), function(i){
subData <- all_data3 %>% dplyr::filter(Element == measures[i])
subData$Value <- round(subData$Value, 1)
subData$Country <- tolower(subData$Country)
subData$Country <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = subData$Country)
subData$Country <- gsub(pattern = ' ', replacement = '-', x = subData$Country)
subData$combination <- paste(subData$Country, '_', subData$Item, sep = '')
subData <- subData[c('Year', 'Value', 'combination')]
subData <- subData %>% spread(key = combination, value = Value)
colnames(subData)[1] <- 'year'
subData <- as.data.frame(subData)
colnames(subData)[ncol(subData)] <- paste(colnames(subData)[ncol(subData)], ',', sep = '')
subData[,ncol(subData)] <- paste(subData[,ncol(subData)], ',', sep='')
# write.delim(subData, paste(nicerNms[i], '.tsv', sep = ''))
write.csv(subData, file = paste('./_data_sources/crop/', nicerNms[i], '.csv', sep = ''), row.names = FALSE, sep = "|")
})
all_data3 <- all_data2 %>% group_by(Item, Element, Unit, food_group, Year) %>% summarise(sum(Value))
names(all_data3)[ncol(all_data3)] <- 'Value'
all_data3$food_group <- tolower(gsub(pattern = ' ', replacement = '_', x = all_data3$food_group))
all_data3$Item <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = all_data3$Item)
all_data3$Item <- tolower(gsub(pattern = ' ', replacement = '-', x = all_data3$Item))
all_data3$Item <- tolower(gsub(pattern = ',', replacement = '', x = all_data3$Item))
unique(as.character(all_data3$Item))
all_data3 <- all_data2 %>% group_by(Item, Element, Unit, food_group, Year) %>% summarise(sum(Value))
names(all_data3)[ncol(all_data3)] <- 'Value'
# change group name
all_data3$food_group <- tolower(gsub(pattern = ' ', replacement = '_', x = all_data3$food_group))
all_data3$Item <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = all_data3$Item)
unique(as.character(all_data3$Item))
all_data3 <- all_data2 %>% group_by(Item, Element, Unit, food_group, Year) %>% summarise(sum(Value))
names(all_data3)[ncol(all_data3)] <- 'Value'
# change group name
all_data3$food_group <- tolower(gsub(pattern = ' ', replacement = '_', x = all_data3$food_group))
all_data3$Item <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = all_data3$Item)
all_data3$Item <- tolower(gsub(pattern = ' ', replacement = '-', x = all_data3$Item))
all_data3$Item <- tolower(gsub(pattern = ',', replacement = '', x = all_data3$Item))
unique(as.character(all_data3$Item))
all_data3$Item <- gsub(pattern = '-$', replacement = '', x = all_data3$Item))
all_data3$Item <- gsub(pattern = '\\-$', replacement = '', x = all_data3$Item))
all_data3$Item <- gsub(pattern = '\\-$', replacement = '', x = all_data3$Item)
unique(as.character(all_data3$Item))
all_data3 <- all_data2
# change group name
all_data3$Item <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = all_data3$Item)
all_data3$Item <- tolower(gsub(pattern = ' ', replacement = '_', x = all_data3$Item))
all_data3$Item <- tolower(gsub(pattern = ',', replacement = '', x = all_data3$Item))
all_data3$Item <- gsub(pattern = '\\-$', replacement = '', x = all_data3$Item)
all_data3$Country <- as.character(all_data3$Country)
all_data3$Country[grep(pattern = "Côte d'Ivoire", x = all_data3$Country, fixed = TRUE)] <- 'Ivory Coast'
# create data sources for each metric
measures <- all_data3$Element %>% unique %>% as.character
nicerNms <- c('fat', 'calories', 'food_quantity', 'protein')
lapply(1:length(measures), function(i){
subData <- all_data3 %>% dplyr::filter(Element == measures[i])
subData$Value <- round(subData$Value, 1)
subData$Country <- tolower(subData$Country)
subData$Country <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = subData$Country)
subData$Country <- gsub(pattern = ' ', replacement = '-', x = subData$Country)
subData$combination <- paste(subData$Country, '_', subData$Item, sep = '')
subData <- subData[c('Year', 'Value', 'combination')]
subData <- subData %>% spread(key = combination, value = Value)
colnames(subData)[1] <- 'year'
subData <- as.data.frame(subData)
colnames(subData)[ncol(subData)] <- paste(colnames(subData)[ncol(subData)], ',', sep = '')
subData[,ncol(subData)] <- paste(subData[,ncol(subData)], ',', sep='')
# write.delim(subData, paste(nicerNms[i], '.tsv', sep = ''))
write.csv(subData, file = paste('./_data_sources/crop/', nicerNms[i], '.csv', sep = ''), row.names = FALSE, sep = "|")
})
all_data3 <- all_data2
# change group name
all_data3$Item <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = all_data3$Item)
all_data3$Item <- tolower(gsub(pattern = ' ', replacement = '_', x = all_data3$Item))
all_data3$Item <- tolower(gsub(pattern = ',', replacement = '', x = all_data3$Item))
all_data3$Item <- gsub(pattern = '\\_$', replacement = '', x = all_data3$Item)
all_data3$Country <- as.character(all_data3$Country)
all_data3$Country[grep(pattern = "Côte d'Ivoire", x = all_data3$Country, fixed = TRUE)] <- 'Ivory Coast'
# create data sources for each metric
measures <- all_data3$Element %>% unique %>% as.character
nicerNms <- c('fat', 'calories', 'food_quantity', 'protein')
lapply(1:length(measures), function(i){
subData <- all_data3 %>% dplyr::filter(Element == measures[i])
subData$Value <- round(subData$Value, 1)
subData$Country <- tolower(subData$Country)
subData$Country <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = subData$Country)
subData$Country <- gsub(pattern = ' ', replacement = '-', x = subData$Country)
subData$combination <- paste(subData$Country, '_', subData$Item, sep = '')
subData <- subData[c('Year', 'Value', 'combination')]
subData <- subData %>% spread(key = combination, value = Value)
colnames(subData)[1] <- 'year'
subData <- as.data.frame(subData)
colnames(subData)[ncol(subData)] <- paste(colnames(subData)[ncol(subData)], ',', sep = '')
subData[,ncol(subData)] <- paste(subData[,ncol(subData)], ',', sep='')
# write.delim(subData, paste(nicerNms[i], '.tsv', sep = ''))
write.csv(subData, file = paste('./_data_sources/crop/', nicerNms[i], '.csv', sep = ''), row.names = FALSE, sep = "|")
})
# create data sources
all_data3 <- all_data2 %>% group_by(Item, Element, Unit, food_group, Year) %>% summarise(sum(Value))
names(all_data3)[ncol(all_data3)] <- 'Value'
# change group name
all_data3$food_group <- tolower(gsub(pattern = ' ', replacement = '_', x = all_data3$food_group))
all_data3$Item <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = all_data3$Item)
all_data3$Item <- tolower(gsub(pattern = ' ', replacement = '-', x = all_data3$Item))
all_data3$Item <- tolower(gsub(pattern = ',', replacement = '', x = all_data3$Item))
all_data3$Item <- gsub(pattern = '\\-$', replacement = '', x = all_data3$Item)
# create data sources for each metric
measures <- all_data3$Element %>% unique %>% as.character
nicerNms <- c('fat', 'calories', 'food_quantity', 'protein')
lapply(1:length(measures), function(i){
subData <- all_data3 %>% dplyr::filter(Element == measures[i])
subData$Value <- round(subData$Value, 1)
subData$combination <- paste(subData$Item, '_', subData$food_group, sep = '')
subData <- subData[c('Year', 'Value', 'combination')]
subData <- subData %>% spread(key = combination, value = Value)
colnames(subData)[1] <- 'year'
subData <- as.data.frame(subData)
colnames(subData)[ncol(subData)] <- paste(colnames(subData)[ncol(subData)], ',', sep = '')
subData[,ncol(subData)] <- paste(subData[,ncol(subData)], ',', sep='')
# write.delim(subData, paste(nicerNms[i], '.tsv', sep = ''))
write.csv(subData, file = paste('./_data_sources/global/', nicerNms[i], '.csv', sep = ''), row.names = FALSE, sep = "|")
})
g = gc()
rm(list=ls())
