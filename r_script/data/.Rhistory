options(warn = -1)
options(scipen = 999)
suppressMessages(library(testthat))
test_that("Test sqrt_newton: positive numeric",{
expected <- 2 # Define the result we expect
actual <- sqrt_newton(4, 1) # Code to test
expect_equal(expected, actual) # Compare
})
test_that("Test sqrt_newton: positive numeric",{
eps <- 0.001
expected <- 2
actual <- sqrt_newton(4, 1, eps = eps)
expect_lt(abs(expected - actual), eps)
})
test_that("Test sqrt_newton: negative numeric",{
expect_error(sqrt_newton(-4, 1))
})
sqrt_newton <- function(a, init, eps = 0.01){
stopifnot(a >= 0)
while(abs(init**2 - a) > eps){
init <- 1/2 *(init + a/init)
}
return(init)
}
test_that("Test sqrt_newton: negative numeric",{
expect_error(sqrt_newton(-4, 1))
})
sqrt_newton(49, 1E100000, 1E-100000)
sqrt_newton <- function(a, init, eps = 0.01){
stopifnot(a >= 0)
i <- 1
while(abs(init**2 - a) > eps){
init <- 1/2 *(init + a/init)
i <- i + 1
if(i > 100) stop("Maximum number of iterations reached")
}
return(init)
}
sqrt_newton(49, 1E100, 1E-100)
sqrt_newton <- function(a, init, eps = 0.01, iter = 100){
stopifnot(a >= 0)
i <- 1
while(abs(init**2 - a) > eps){
init <- 1/2 *(init + a/init)
i <- i + 1
if(i > iter) stop("Maximum number of iterations reached")
}
return(init)
}
test_that("Test sqrt_newton: not enough iterations",{
expect_error(sqrt_newton(4, 1E100, 1E-100, iter = 100))
})
test_file('GitHub/r_scripts/testingFunctions.R')
test_file('GitHub/r_scripts/testingFunctions.R')
source('~/GitHub/cwr_changing_global_diet/r_script/chDiets_data.R', echo=TRUE)
options(warn = -1)
options(scipen = 999)
# load packages
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(ggplot2))
suppressMessages(library(caroline))
suppressMessages(library(purrr))
suppressMessages(library(broom))
suppressMessages(library(ggplot2))
suppressMessages(library(epanetReader))
suppressMessages(library(ff))
suppressMessages(library(ffbase))
setwd("~/GitHub/cwr_changing_global_diet/r_script/data")
# R options
options(warn = -1)
options(scipen = 999)
# load packages
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(ggplot2))
suppressMessages(library(caroline))
suppressMessages(library(purrr))
suppressMessages(library(broom))
suppressMessages(library(ggplot2))
suppressMessages(library(epanetReader))
suppressMessages(library(ff))
suppressMessages(library(ffbase))
all_data <- read.csv('all_1961_2009_final_analysis_data_final_2016_10_28.csv')
View(all_data)
gFood <- read.csv('FBS_commodities_foodgroups_regions_finaltest.csv')
gFood <- gFood %>% dplyr::select(Item:food_group) %>% unique
all_data2 <- dplyr::left_join(all_data, gFood, by=c('Item'))
rm(all_data, gFood)
all_data2 <- all_data2 %>% tidyr::gather(Year, Value, Y1961:Y2009)
all_data2$Year <- as.numeric(gsub(pattern='Y', replacement='', x=all_data2$Year))
# create data sources
all_data3 <- all_data2 %>% group_by(Country, Element, Unit, food_group, Year) %>% summarise(sum(Value))
names(all_data3)[ncol(all_data3)] <- 'Value'
View(all_data3)
gsub(pattern = ' ', replacement = '', x = all_data3$food_group)
gsub(pattern = ' ', replacement = '_', x = all_data3$food_group)
tolower(gsub(pattern = ' ', replacement = '_', x = all_data3$food_group))
all_data3$food_group <- tolower(gsub(pattern = ' ', replacement = '_', x = all_data3$food_group))
View(all_data3)
measures <- all_data3$Element %>% unique %>% as.character
nicerNms <- c('fat', 'calories', 'food_quantity', 'protein')
measures <- all_data3$Element %>% unique %>% as.character
measures
nicerNms <- c('fat', 'calories', 'food_quantity', 'protein')
nicerNms
i=1
subData <- all_data3 %>% dplyr::filter(Element == measures[i])
subData$Value <- round(subData$Value, 1)
head(subData)
subData$Country <- tolower(subData$Country)
head(subData)
subData$combination <- paste(subData$Country, '_', subData$food_group, sep = '')
head(subData)
View(subData)
gsub(pattern = ' \\(*', replacement = '', x = subData$Country)
gsub(pattern = ' \\(*\\)', replacement = '', x = subData$Country)
tail(gsub(pattern = ' \\(*\\)', replacement = '', x = subData$Country))
tail(gsub(pattern = ' \\(*\\)', replacement = '', x = subData$Country), 1000)
tail(gsub(pattern = ' \\(*\\)', replacement = '', x = subData$Country), 2000)
View(subData)
tail(gsub(pattern = ' \\(*\\)', replacement = '', x = subData$Country), 3000)
View(subData)
test <- subData[subData$Country=='bolivia (plurinational state of)',]
View(test)
View(test)
text = 'Â¿Donde extrajo ${v_1_2015_2}?'
text
gsub(pattern='* \\$\\{(.*?)\\}', replacement='', x=text)
gsub(pattern = '* \\((.*?)\\)', replacement = '', x = test$Country)
rm(test)
subData$Country <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = subData$Country)
View(subData)
subData$Country <- gsub(pattern = ' ', replacement = '_', x = subData$Country)
View(subData)
subData <- all_data3 %>% dplyr::filter(Element == measures[i])
subData$Value <- round(subData$Value, 1)
subData$Country <- tolower(subData$Country)
subData$Country <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = subData$Country)
subData$Country <- gsub(pattern = ' ', replacement = '_', x = subData$Country)
subData$combination <- paste(subData$Country, '_', subData$food_group, sep = '')
subData <- subData[c('Year', 'Value', 'combination')]
subData <- subData %>% spread(key = combination, value = Value)
colnames(subData)[1] <- 'year'
View(subData)
rm(i)
measures <- all_data3$Element %>% unique %>% as.character
nicerNms <- c('fat', 'calories', 'food_quantity', 'protein')
lapply(1:length(measures), function(i){
subData <- all_data3 %>% dplyr::filter(Element == measures[i])
subData$Value <- round(subData$Value, 1)
subData$Country <- tolower(subData$Country)
subData$Country <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = subData$Country)
subData$Country <- gsub(pattern = ' ', replacement = '_', x = subData$Country)
subData$combination <- paste(subData$Country, '_', subData$food_group, sep = '')
subData <- subData[c('Year', 'Value', 'combination')]
subData <- subData %>% spread(key = combination, value = Value)
colnames(subData)[1] <- 'year'
# write.delim(subData, paste(nicerNms[i], '.tsv', sep = ''))
write.table(subData, file = paste(nicerNms[i], '.csv', sep = ''), row.names=FALSE, sep="|")
})
readLines(con = 'calories.csv')
text <- readLines(con = 'calories.csv')
text[1]
1:length(text)
tail(text[1])
for(i in 1:length(text)){
if(i < length(text)){
text[i] <- paste(text[i], ',', sep = '')
}
}
text[1]
sink('calories2.csv') # redirect console output to a file
text
sink()
text
paste(text[i], ',', sep = '')
View(subData)
subData[,ncol(subData)]
paste(subData[,ncol(subData)], ',', sep='')
(nrow(subData)-1)
paste(subData[1:(nrow(subData)-1), ncol(subData)], ',', sep='')
colnames(subData)[ncol(subData)]
paste(colnames(subData)[ncol(subData)], ',' sep = '')
paste(colnames(subData)[ncol(subData)], ',', sep = '')
i=1
measures <- all_data3$Element %>% unique %>% as.character
nicerNms <- c('fat', 'calories', 'food_quantity', 'protein')
lapply(1:length(measures), function(i){
subData <- all_data3 %>% dplyr::filter(Element == measures[i])
subData$Value <- round(subData$Value, 1)
subData$Country <- tolower(subData$Country)
subData$Country <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = subData$Country)
subData$Country <- gsub(pattern = ' ', replacement = '_', x = subData$Country)
subData$combination <- paste(subData$Country, '_', subData$food_group, sep = '')
subData <- subData[c('Year', 'Value', 'combination')]
subData <- subData %>% spread(key = combination, value = Value)
colnames(subData)[1] <- 'year'
subData[1:(nrow(subData)-1), ncol(subData)] <- paste(subData[1:(nrow(subData)-1), ncol(subData)], ',', sep='')
colnames(subData)[ncol(subData)] <- paste(colnames(subData)[ncol(subData)], ',', sep = '')
# write.delim(subData, paste(nicerNms[i], '.tsv', sep = ''))
write.table(subData, file = paste(nicerNms[i], '.csv', sep = ''), row.names=FALSE, sep="|")
})
subData <- all_data3 %>% dplyr::filter(Element == measures[i])
subData$Value <- round(subData$Value, 1)
subData$Country <- tolower(subData$Country)
subData$Country <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = subData$Country)
subData$Country <- gsub(pattern = ' ', replacement = '_', x = subData$Country)
subData$combination <- paste(subData$Country, '_', subData$food_group, sep = '')
subData <- subData[c('Year', 'Value', 'combination')]
subData <- subData %>% spread(key = combination, value = Value)
colnames(subData)[1] <- 'year'
View(subData)
colnames(subData)[ncol(subData)] <- paste(colnames(subData)[ncol(subData)], ',', sep = '')
colnames(subData)
tail(colnames(subData))
1:(nrow(subData)-1)
subData[1:(nrow(subData)-1), ncol(subData)]
paste(subData[1:(nrow(subData)-1), ncol(subData)], ',', sep='')
paste(as.numeric(subData[1:(nrow(subData)-1), ncol(subData)]), ',', sep='')
as.numeric(subData[1:(nrow(subData)-1), ncol(subData)])
as.vector(subData[1:(nrow(subData)-1), ncol(subData)])
as.numeric(subData[1:(nrow(subData)-1), ncol(subData)])
as.character(subData[1:(nrow(subData)-1), ncol(subData)])
subData[, ncol(subData)]
paste(subData[, ncol(subData)], ',', sep='')
subData <- as.data.frame(subData)
subData[1:(nrow(subData)-1), ncol(subData)]
paste(subData[1:(nrow(subData)-1), ncol(subData)], ',', sep='')
length(paste(subData[1:(nrow(subData)-1), ncol(subData)], ',', sep=''))
subData[1:(nrow(subData)-1), ncol(subData)] <- paste(subData[1:(nrow(subData)-1), ncol(subData)], ',', sep='')
View(subData)
subData[1:(nrow(subData)-1), ncol(subData)]
subData[, ncol(subData)]
head(subData[, 1820:ncol(subData)])
View(subData[, 1820:ncol(subData)])
measures <- all_data3$Element %>% unique %>% as.character
nicerNms <- c('fat', 'calories', 'food_quantity', 'protein')
lapply(1:length(measures), function(i){
subData <- all_data3 %>% dplyr::filter(Element == measures[i])
subData$Value <- round(subData$Value, 1)
subData$Country <- tolower(subData$Country)
subData$Country <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = subData$Country)
subData$Country <- gsub(pattern = ' ', replacement = '_', x = subData$Country)
subData$combination <- paste(subData$Country, '_', subData$food_group, sep = '')
subData <- subData[c('Year', 'Value', 'combination')]
subData <- subData %>% spread(key = combination, value = Value)
colnames(subData)[1] <- 'year'
subData <- as.data.frame(subData)
colnames(subData)[ncol(subData)] <- paste(colnames(subData)[ncol(subData)], ',', sep = '')
subData[,ncol(subData)] <- paste(subData[,ncol(subData)], ',', sep='')
# write.delim(subData, paste(nicerNms[i], '.tsv', sep = ''))
write.table(subData, file = paste(nicerNms[i], '.csv', sep = ''), row.names=FALSE, sep="|")
})
subData <- all_data3 %>% dplyr::filter(Element == measures[i])
subData$Value <- round(subData$Value, 1)
subData$Country <- tolower(subData$Country)
subData$Country <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = subData$Country)
subData$Country <- gsub(pattern = ' ', replacement = '_', x = subData$Country)
subData$combination <- paste(subData$Country, '_', subData$food_group, sep = '')
subData <- subData[c('Year', 'Value', 'combination')]
subData <- subData %>% spread(key = combination, value = Value)
colnames(subData)[1] <- 'year'
subData <- as.data.frame(subData)
colnames(subData)[ncol(subData)] <- paste(colnames(subData)[ncol(subData)], ',', sep = '')
subData[,ncol(subData)] <- paste(subData[,ncol(subData)], ',', sep='')
View(subData)
View(subData[, 1820:ncol(subData)])
nicerNms[i]
paste(nicerNms[i], '.csv', sep = '')
write.table(subData, file = paste(nicerNms[i], '.csv', sep = ''), row.names=FALSE, sep="|")
dim(subData)
write.table(subData, file = paste(nicerNms[i], '.csv', sep = ''), row.names = FALSE, sep = "|")
write.csv(subData, file = paste(nicerNms[i], '.csv', sep = ''), row.names = FALSE, sep = "|")
write.csv(subData, file = paste(nicerNms[i], '.csv', sep = ''), row.names = FALSE
)
write.csv(subData, file = paste(nicerNms[i], '.csv', sep = ''), row.names = FALSE, sep = "|")
write.table(subData, file = paste(nicerNms[i], '.csv', sep = ''), row.names = FALSE, sep = "|")
measures <- all_data3$Element %>% unique %>% as.character
nicerNms <- c('fat', 'calories', 'food_quantity', 'protein')
lapply(1:length(measures), function(i){
subData <- all_data3 %>% dplyr::filter(Element == measures[i])
subData$Value <- round(subData$Value, 1)
subData$Country <- tolower(subData$Country)
subData$Country <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = subData$Country)
subData$Country <- gsub(pattern = ' ', replacement = '_', x = subData$Country)
subData$combination <- paste(subData$Country, '_', subData$food_group, sep = '')
subData <- subData[c('Year', 'Value', 'combination')]
subData <- subData %>% spread(key = combination, value = Value)
colnames(subData)[1] <- 'year'
subData <- as.data.frame(subData)
colnames(subData)[ncol(subData)] <- paste(colnames(subData)[ncol(subData)], ',', sep = '')
subData[,ncol(subData)] <- paste(subData[,ncol(subData)], ',', sep='')
# write.delim(subData, paste(nicerNms[i], '.tsv', sep = ''))
write.csv(subData, file = paste(nicerNms[i], '.csv', sep = ''), row.names = FALSE, sep = "|")
})
View(subData)
View(all_data3)
hist(all_data3$Value)
suppressMessages(library(shiny))
options(warn = -1)
options(scipen = 999)
# load packages
suppressMessages(library(shiny))
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
shinyServer(function(input, output) {
# Expression that generates a histogram. The expression is
# wrapped in a call to renderPlot to indicate that:
#
#  1) It is "reactive" and therefore should be automatically
#     re-executed when inputs change
#  2) Its output type is a plot
output$distPlot <- renderPlot({
x    <- all_data3[,ncol(all_data3)]  # Old Faithful Geyser data
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
shinyUI(fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
runExample("01_hello")
shinyApp(ui = 'C:/Users/haachicanoy/Documents/GitHub/r_scripts/shiny/ui.R', server = 'C:/Users/haachicanoy/Documents/GitHub/r_scripts/shiny/server.R')
shiny::runApp('~/GitHub/r_scripts/shiny')
g=gc()
rm(list=ls())
options(warn = -1)
options(scipen = 999)
# load packages
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(ggplot2))
suppressMessages(library(caroline))
suppressMessages(library(purrr))
suppressMessages(library(broom))
suppressMessages(library(ggplot2))
suppressMessages(library(epanetReader))
suppressMessages(library(ff))
suppressMessages(library(ffbase))
all_data <- read.csv('all_1961_2009_final_analysis_data_final_2016_10_28.csv')
gFood <- read.csv('FBS_commodities_foodgroups_regions_finaltest.csv')
gFood <- gFood %>% dplyr::select(Item:food_group) %>% unique
# merging global diet and food groups data
all_data2 <- dplyr::left_join(all_data, gFood, by=c('Item'))
rm(all_data, gFood)
# reshape dataset
all_data2 <- all_data2 %>% tidyr::gather(Year, Value, Y1961:Y2009)
all_data2$Year <- as.numeric(gsub(pattern='Y', replacement='', x=all_data2$Year))
# create data sources
all_data3 <- all_data2 %>% group_by(Country, Element, Unit, food_group, Year) %>% summarise(sum(Value))
names(all_data3)[ncol(all_data3)] <- 'Value'
# change group name
all_data3$food_group <- tolower(gsub(pattern = ' ', replacement = '_', x = all_data3$food_group))
# select only 6 countries
# all_data3 <- all_data3 %>% filter(Country %in% c('Colombia', 'India', 'Germany', 'France', 'Argentina', 'Japan'))
# create data sources for each metric
measures <- all_data3$Element %>% unique %>% as.character
nicerNms <- c('fat', 'calories', 'food_quantity', 'protein')
unique(subData$Country)
unique(all_data3$Country)
all_data3$Country[grep(pattern = "CÃ´te d'Ivoire", x = all_data3$Country, fixed = TRUE)] <- 'Ivory Coast'
all_data3$Country
all_data3$Country <- as.character(all_data3$Country)
all_data3$Country[grep(pattern = "CÃ´te d'Ivoire", x = all_data3$Country, fixed = TRUE)] <- 'Ivory Coast'
# R options
options(warn = -1)
options(scipen = 999)
# load packages
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(ggplot2))
suppressMessages(library(caroline))
suppressMessages(library(purrr))
suppressMessages(library(broom))
suppressMessages(library(ggplot2))
suppressMessages(library(epanetReader))
suppressMessages(library(ff))
suppressMessages(library(ffbase))
# load global diet data
# It's better to use Sara's data: CropData_longform.rpt (PENDING)
all_data <- read.csv('all_1961_2009_final_analysis_data_final_2016_10_28.csv')
# load food groups
gFood <- read.csv('FBS_commodities_foodgroups_regions_finaltest.csv')
gFood <- gFood %>% dplyr::select(Item:food_group) %>% unique
# merging global diet and food groups data
all_data2 <- dplyr::left_join(all_data, gFood, by=c('Item'))
rm(all_data, gFood)
# reshape dataset
all_data2 <- all_data2 %>% tidyr::gather(Year, Value, Y1961:Y2009)
all_data2$Year <- as.numeric(gsub(pattern='Y', replacement='', x=all_data2$Year))
# create data sources
all_data3 <- all_data2 %>% group_by(Country, Element, Unit, food_group, Year) %>% summarise(sum(Value))
names(all_data3)[ncol(all_data3)] <- 'Value'
# change group name
all_data3$food_group <- tolower(gsub(pattern = ' ', replacement = '_', x = all_data3$food_group))
all_data3$Country <- as.character(all_data3$Country)
all_data3$Country[grep(pattern = "CÃ´te d'Ivoire", x = all_data3$Country, fixed = TRUE)] <- 'Ivory Coast'
measures <- all_data3$Element %>% unique %>% as.character
nicerNms <- c('fat', 'calories', 'food_quantity', 'protein')
lapply(1:length(measures), function(i){
subData <- all_data3 %>% dplyr::filter(Element == measures[i])
subData$Value <- round(subData$Value, 1)
subData$Country <- tolower(subData$Country)
subData$Country <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = subData$Country)
subData$Country <- gsub(pattern = ' ', replacement = '_', x = subData$Country)
subData$combination <- paste(subData$Country, '_', subData$food_group, sep = '')
subData <- subData[c('Year', 'Value', 'combination')]
subData <- subData %>% spread(key = combination, value = Value)
colnames(subData)[1] <- 'year'
subData <- as.data.frame(subData)
colnames(subData)[ncol(subData)] <- paste(colnames(subData)[ncol(subData)], ',', sep = '')
subData[,ncol(subData)] <- paste(subData[,ncol(subData)], ',', sep='')
# write.delim(subData, paste(nicerNms[i], '.tsv', sep = ''))
write.csv(subData, file = paste(nicerNms[i], '.csv', sep = ''), row.names = FALSE, sep = "|")
})
shiny::runApp('~/GitHub/r_scripts/shiny')
350000-120000
400000-120000
g=gc()
rm(list=ls())
# R options
options(warn = -1)
options(scipen = 999)
# load packages
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(ggplot2))
suppressMessages(library(caroline))
suppressMessages(library(purrr))
suppressMessages(library(broom))
suppressMessages(library(ggplot2))
suppressMessages(library(epanetReader))
suppressMessages(library(ff))
suppressMessages(library(ffbase))
# load global diet data
# It's better to use Sara's data: CropData_longform.rpt (PENDING)
all_data <- read.csv('all_1961_2009_final_analysis_data_final_2016_10_28.csv')
# load food groups
gFood <- read.csv('FBS_commodities_foodgroups_regions_finaltest.csv')
gFood <- gFood %>% dplyr::select(Item:food_group) %>% unique
# merging global diet and food groups data
all_data2 <- dplyr::left_join(all_data, gFood, by=c('Item'))
rm(all_data, gFood)
# reshape dataset
all_data2 <- all_data2 %>% tidyr::gather(Year, Value, Y1961:Y2009)
all_data2$Year <- as.numeric(gsub(pattern='Y', replacement='', x=all_data2$Year))
# create data sources
all_data3 <- all_data2 %>% group_by(Country, Element, Unit, food_group, Year) %>% summarise(sum(Value))
names(all_data3)[ncol(all_data3)] <- 'Value'
# change group name
all_data3$food_group <- tolower(gsub(pattern = ' ', replacement = '_', x = all_data3$food_group))
all_data3$Country <- as.character(all_data3$Country)
all_data3$Country[grep(pattern = "CÃ´te d'Ivoire", x = all_data3$Country, fixed = TRUE)] <- 'Ivory Coast'
# select only 6 countries
# all_data3 <- all_data3 %>% filter(Country %in% c('Colombia', 'India', 'Germany', 'France', 'Argentina', 'Japan'))
# create data sources for each metric
measures <- all_data3$Element %>% unique %>% as.character
nicerNms <- c('fat', 'calories', 'food_quantity', 'protein')
lapply(1:length(measures), function(i){
subData <- all_data3 %>% dplyr::filter(Element == measures[i])
subData$Value <- round(subData$Value, 1)
subData$Country <- tolower(subData$Country)
subData$Country <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = subData$Country)
subData$Country <- gsub(pattern = ' ', replacement = '-', x = subData$Country)
subData$combination <- paste(subData$Country, '_', subData$food_group, sep = '')
subData <- subData[c('Year', 'Value', 'combination')]
subData <- subData %>% spread(key = combination, value = Value)
colnames(subData)[1] <- 'year'
subData <- as.data.frame(subData)
colnames(subData)[ncol(subData)] <- paste(colnames(subData)[ncol(subData)], ',', sep = '')
subData[,ncol(subData)] <- paste(subData[,ncol(subData)], ',', sep='')
# write.delim(subData, paste(nicerNms[i], '.tsv', sep = ''))
write.csv(subData, file = paste(nicerNms[i], '.csv', sep = ''), row.names = FALSE, sep = "|")
})
i=1
paste('./_data_sources/', nicerNms[i], '.csv', sep = '')
g = gc()
rm(list=ls())
