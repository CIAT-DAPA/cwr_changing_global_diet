setwd("C:/Users/haachicanoy/Documents/GitHub/Statistical_consulting/_cacao_analysis/Data/Results")
imagesList <- list.files(pattern = "*.png$", full.names = T)
imagesList <- gsub(pattern = ".png", replacement = "", x = imagesList)
convImage <- function(image_file, from, to){
system(paste("convert -verbose -density 300 ", image_file, ".", from, " -quality 100 -sharpen 0x1.0 -alpha off ", image_file, ".", to, sep=""), wait=TRUE)
}
convImage <- Vectorize(FUN = convImage, vectorize.args = "image_file")
convImage(image_file = imagesList, from = "png", to = "eps")
warnings()
convImage <- function(image_file, from, to){
system(paste("convert -verbose ", image_file, ".", from, " -quality 100 -sharpen 0x1.0 -alpha off ", image_file, ".", to, sep=""), wait=TRUE)
# system(paste("convert -verbose -density 300 ", image_file, ".", from, " -quality 100 -sharpen 0x1.0 -alpha off ", image_file, ".", to, sep=""), wait=TRUE)
}
convImage <- Vectorize(FUN = convImage, vectorize.args = "image_file")
convImage(image_file = imagesList, from = "png", to = "eps")
convImage <- function(image_file, from, to){
system(paste("convert -verbose -density ", image_file, ".", from, " -quality 100 -sharpen 0x1.0 -alpha off ", image_file, ".", to, sep=""), wait=TRUE)
# system(paste("convert -verbose -density 300 ", image_file, ".", from, " -quality 100 -sharpen 0x1.0 -alpha off ", image_file, ".", to, sep=""), wait=TRUE)
}
convImage <- Vectorize(FUN = convImage, vectorize.args = "image_file")
convImage(image_file = imagesList, from = "png", to = "eps")
convImage <- function(image_file, from, to){
system(paste("convert -verbose -density 400", image_file, ".", from, " -quality 100 -sharpen 0x1.0 -alpha off ", image_file, ".", to, sep=""), wait=TRUE)
# system(paste("convert -verbose -density 300 ", image_file, ".", from, " -quality 100 -sharpen 0x1.0 -alpha off ", image_file, ".", to, sep=""), wait=TRUE)
}
convImage <- Vectorize(FUN = convImage, vectorize.args = "image_file")
convImage(image_file = imagesList, from = "png", to = "eps")
convImage <- function(image_file, from, to){
system(paste("convert -verbose -density 300 ", image_file, ".", from, " -quality 100 -sharpen 0x1.0 -alpha off ", image_file, ".", to, sep=""), wait=TRUE)
# system(paste("convert -verbose -density 300 ", image_file, ".", from, " -quality 100 -sharpen 0x1.0 -alpha off ", image_file, ".", to, sep=""), wait=TRUE)
}
convImage <- Vectorize(FUN = convImage, vectorize.args = "image_file")
convImage(image_file = imagesList, from = "png", to = "eps")
convImage <- function(image_file, from, to){
system(paste("convert -verbose -density 300 ", image_file, ".", from, " -quality 100 -sharpen 0x1.0 -alpha off ", image_file, ".bmp", sep=""), wait=TRUE)
}
convImage <- Vectorize(FUN = convImage, vectorize.args = "image_file")
convImage(image_file = imagesList, from = "png", to = "eps")
convImage <- function(image_file, from, to){
system(paste("convert -verbose -density 300 ", image_file, ".", from, " -quality 100 -sharpen 0x1.0 -alpha off ", image_file, ".", to, sep=""), wait=TRUE)
}
convImage <- Vectorize(FUN = convImage, vectorize.args = "image_file")
convImage(image_file = imagesList, from = "png", to = "jpg")
setwd("C:/Users/haachicanoy/Documents/GitHub/Statistical_consulting/_cacao_analysis/Data/Results")
imagesList <- list.files(pattern = "*.png$", full.names = T)
imagesList <- gsub(pattern = ".png", replacement = "", x = imagesList)
convImage <- function(image_file, from, to){
system(paste("convert -verbose -density 300 ", image_file, ".", from, " -quality 100 -sharpen 0x1.0 -alpha off ", image_file, ".", to, sep=""), wait=TRUE)
}
lapply(1:length(imagesList), function(x){
convImage(image_file = x, from = "png", to = "jpg")
})
image_file <- imagesList[1]
image_file
from = "png"
to = "jpg"
paste("convert -verbose -density 300 ", image_file, ".", from, " -quality 100 -sharpen 0x1.0 -alpha off ", image_file, ".", to, sep="")
setwd("~")
imagesList <- list.files(path = "C:/Users/haachicanoy/Documents/GitHub/Statistical_consulting/_cacao_analysis/Data/Results", pattern = "*.png$", full.names = T)
imagesList
imagesList <- gsub(pattern = ".png", replacement = "", x = imagesList)
imagesList
convImage <- function(image_file, from, to){
system(paste("convert -verbose -density 300 ", image_file, ".", from, " -quality 100 -sharpen 0x1.0 -alpha off ", image_file, ".", to, sep=""), wait=TRUE)
}
lapply(1:length(imagesList), function(x){
convImage(image_file = x, from = "png", to = "jpg")
})
install.packages(c("networkD3", "survival"))
install.packages(c("gRbase", "Rcpp", "rstan"))
install.packages(c("earth", "gbm", "RandomFieldsUtils"))
17+26
17+26.5
60 - (17+26.5)
60 - (17+26)
90096832 > 12847860
options(warn = -1)
options(scipen = 999)
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(ggplot2))
suppressMessages(library(caroline))
suppressMessages(library(purrr))
suppressMessages(library(broom))
suppressMessages(library(ggplot2))
suppressMessages(library(epanetReader))
suppressMessages(library(ff))
suppressMessages(library(ffbase))
all_data <- read.csv('all_1961_2009_final_analysis_data_final_2016_10_28.csv')
setwd("~/GitHub/cwr_changing_global_diet/r_script/data")
all_data <- read.csv('all_1961_2009_final_analysis_data_final_2016_10_28.csv')
gFood <- read.csv('FBS_commodities_foodgroups_regions_finaltest.csv')
gFood <- gFood %>% dplyr::select(Item:food_group) %>% unique
all_data2 <- dplyr::left_join(all_data, gFood, by=c('Item'))
rm(all_data, gFood)
# reshape dataset
all_data2 <- all_data2 %>% tidyr::gather(Year, Value, Y1961:Y2009)
all_data2$Year <- as.numeric(gsub(pattern='Y', replacement='', x=all_data2$Year))
all_data2$food_group <- as.character(all_data2$food_group)
# updates on food_group column
all_data2$food_group <- gsub(pattern = "Cereals", replacement = "Grains", x = all_data2$food_group, fixed = T)
all_data2$food_group <- gsub(pattern = "Oilcrops", replacement = "Oils", x = all_data2$food_group, fixed = T)
all_data2$food_group <- gsub(pattern = "Sugarcrops", replacement = "Sweeteners", x = all_data2$food_group, fixed = T)
all_data2$food_group <- gsub(pattern = "^Spices$", replacement = "Spices and stimulants", x = all_data2$food_group)
all_data2$food_group <- gsub(pattern = "^Stimulants$", replacement = "Spices and stimulants", x = all_data2$food_group)
# updates on country names
all_data2$Country <- as.character(all_data2$Country)
all_data2$Country <- gsub(pattern = "Antigua and Barbuda", replacement = "Antigua and Barb.", x = all_data2$Country, fixed = T)
all_data2$Country <- gsub(pattern = "Belgium-Luxembourg", replacement = "Belgium and Lux.", x = all_data2$Country, fixed = T)
all_data2$Country <- gsub(pattern = "Bolivia \\(Plurinational State of\\)", replacement = "Bolivia", x = all_data2$Country)
all_data2$Country <- gsub(pattern = "Brunei Darussalam", replacement = "Brunei Dar.", x = all_data2$Country, fixed = T)
all_data2$Country <- gsub(pattern = "Central African Republic", replacement = "Cent. African Rep.", x = all_data2$Country, fixed = T)
all_data2$Country <- gsub(pattern = "Central African Republic", replacement = "Cent. African Rep.", x = all_data2$Country, fixed = T)
all_data2$Country[grep(pattern = "C?te d'Ivoire", x = all_data2$Country, fixed = TRUE)] <- 'Ivory Coast' # Windows
all_data2$Country[grep(pattern = "CÃ´te d'Ivoire", x = all_data2$Country, fixed = TRUE)] <- 'Ivory Coast' # Windows
# all_data2$Country[grep(pattern = "C\364te d'Ivoire", x = all_data2$Country, fixed = TRUE)] <- 'Ivory Coast' # MB
all_data2$Country <- gsub(pattern = "Democratic People's Republic of Korea", replacement = "North Korea", x = all_data2$Country, fixed = T)
all_data2$Country <- gsub(pattern = "Dominican Republic", replacement = "Dominican Rep.", x = all_data2$Country, fixed = T)
all_data2$Country <- gsub(pattern = "Ethiopia PDR", replacement = "Ethiopia", x = all_data2$Country, fixed = T)
all_data2$Country <- gsub(pattern = "Iran \\(Islamic Republic of\\)", replacement = "Iran", x = all_data2$Country)
all_data2$Country <- gsub(pattern = "Lao People's Democratic Republic", replacement = "Laos", x = all_data2$Country, fixed = T)
all_data2$Country <- gsub(pattern = "Republic of Korea", replacement = "Rep. of Korea", x = all_data2$Country, fixed = T)
all_data2$Country <- gsub(pattern = "Saint Kitts and Nevis", replacement = "St. Kitts", x = all_data2$Country, fixed = T)
all_data2$Country <- gsub(pattern = "Saint Vincent and the Grenadines", replacement = "St. Vincent", x = all_data2$Country, fixed = T)
all_data2$Country <- gsub(pattern = "Sao Tome and Principe", replacement = "Sao Tome", x = all_data2$Country, fixed = T)
all_data2$Country <- gsub(pattern = "Solomon Islands", replacement = "Solomon Isl.", x = all_data2$Country, fixed = T)
all_data2$Country <- gsub(pattern = "Sudan \\(former\\)", replacement = "Sudan", x = all_data2$Country)
all_data2$Country <- gsub(pattern = "Syrian Arab Republic", replacement = "Syria", x = all_data2$Country, fixed = T)
all_data2$Country <- gsub(pattern = "United Arab Emirates", replacement = "United Arab Em.", x = all_data2$Country, fixed = T)
all_data2$Country <- gsub(pattern = "United Republic of Tanzania", replacement = "Tanzania", x = all_data2$Country, fixed = T)
all_data2$Country <- gsub(pattern = "United States of America", replacement = "USA", x = all_data2$Country, fixed = T)
all_data2$Country <- gsub(pattern = "Venezuela \\(Bolivarian Republic of\\)", replacement = "Venezuela", x = all_data2$Country)
all_data2$Country <- gsub(pattern = "Yugoslav SFR", replacement = "Yugoslavia", x = all_data2$Country, fixed = T)
all_data2$Country <- gsub(pattern = "Viet Nam", replacement = "Vietnam", x = all_data2$Country, fixed = T)
unique(all_data2$Country)
all_data3 <- all_data2
all_data3$Item <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = all_data3$Item)
all_data3$Item <- tolower(gsub(pattern = ' ', replacement = '_', x = all_data3$Item))
all_data3$Item <- tolower(gsub(pattern = ',', replacement = '', x = all_data3$Item))
all_data3$Item <- gsub(pattern = '\\_$', replacement = '', x = all_data3$Item)
all_data3$Item <- gsub(pattern = '\\&', replacement = 'and', x = all_data3$Item)
all_data3$Country <- as.character(all_data3$Country)
measures <- all_data3$Element %>% unique %>% as.character
measures <- c(measures[2], measures[4], measures[1], measures[3])
nicerNms <- c('calories', 'protein', 'fat', 'food_quantity')
lapply(1:length(measures), function(i){
subData <- all_data3 %>% dplyr::filter(Element == measures[i])
subData$Value <- round(subData$Value, 1)
subData$Country <- tolower(subData$Country)
subData$Country <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = subData$Country)
subData$Country <- gsub(pattern = ' ', replacement = '-', x = subData$Country)
subData$combination <- paste(subData$Country, '_', subData$Item, sep = '')
subData <- subData[c('Year', 'Value', 'combination')]
subData <- subData %>% spread(key = combination, value = Value)
colnames(subData)[1] <- 'year'
subData <- as.data.frame(subData)
colnames(subData)[ncol(subData)] <- paste(colnames(subData)[ncol(subData)], ',', sep = '')
subData[,ncol(subData)] <- paste(subData[,ncol(subData)], ',', sep='')
# write.delim(subData, paste(nicerNms[i], '.tsv', sep = ''))
write.csv(subData, file = paste('./_data_sources/crop/', nicerNms[i], '.csv', sep = ''), row.names = FALSE, quote = FALSE, sep = "|")
})
unique(all_data2$Country)
all_data3 <- all_data2 %>% group_by(Country, Element, Unit, food_group, Year) %>% summarise(sum(Value))
names(all_data3)[ncol(all_data3)] <- 'Value'
all_data3$food_group <- tolower(gsub(pattern = ' ', replacement = '_', x = all_data3$food_group))
all_data3$Country <- as.character(all_data3$Country)
all_data3$Country <- gsub(pattern = ".", replacement = "", x = all_data3$Country, fixed = T)
measures <- all_data3$Element %>% unique %>% as.character
measures <- c(measures[2], measures[4], measures[1], measures[3])
nicerNms <- c('calories', 'protein', 'fat', 'food_quantity')
lapply(1:length(measures), function(i){
subData <- all_data3 %>% dplyr::filter(Element == measures[i])
subData$Value <- round(subData$Value, 1)
subData$Country <- tolower(subData$Country)
subData$Country <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = subData$Country)
subData$Country <- gsub(pattern = ' ', replacement = '-', x = subData$Country)
subData$combination <- paste(subData$Country, '_', subData$food_group, sep = '')
subData <- subData[c('Year', 'Value', 'combination')]
subData <- subData %>% spread(key = combination, value = Value)
colnames(subData)[1] <- 'year'
subData <- as.data.frame(subData)
colnames(subData)[ncol(subData)] <- paste(colnames(subData)[ncol(subData)], ',', sep = '')
subData[,ncol(subData)] <- paste(subData[,ncol(subData)], ',', sep='')
# write.delim(subData, paste(nicerNms[i], '.tsv', sep = ''))
write.csv(subData, file = paste('./_data_sources/global/global2/', nicerNms[i], '.csv', sep = ''), row.names = FALSE, quote = FALSE, sep = "|")
})
lapply(1:length(measures), function(i){
subData <- all_data3 %>% dplyr::filter(Element == measures[i])
subData$Value <- round(subData$Value, 1)
subData$Country <- tolower(subData$Country)
subData$Country <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = subData$Country)
subData$Country <- gsub(pattern = ' ', replacement = '-', x = subData$Country)
subData$combination <- paste(subData$Country, '_', subData$food_group, sep = '')
subData <- subData[c('Year', 'Value', 'combination')]
subData <- subData %>% spread(key = combination, value = Value)
colnames(subData)[1] <- 'year'
subData <- as.data.frame(subData)
colnames(subData)[ncol(subData)] <- paste(colnames(subData)[ncol(subData)], ',', sep = '')
subData[,ncol(subData)] <- paste(subData[,ncol(subData)], ',', sep='')
# write.delim(subData, paste(nicerNms[i], '.tsv', sep = ''))
write.csv(subData, file = paste('./_data_sources/global/global2/', nicerNms[i], '.csv', sep = ''), row.names = FALSE, quote = FALSE, sep = "|")
})
all_data3 <- all_data2
# change group name
all_data3$Item <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = all_data3$Item)
all_data3$Item <- tolower(gsub(pattern = ' ', replacement = '_', x = all_data3$Item))
all_data3$Item <- tolower(gsub(pattern = ',', replacement = '', x = all_data3$Item))
all_data3$Item <- gsub(pattern = '\\_$', replacement = '', x = all_data3$Item)
all_data3$Item <- gsub(pattern = '\\&', replacement = 'and', x = all_data3$Item)
all_data3$Country <- as.character(all_data3$Country)
all_data3$Country <- gsub(pattern = ".", replacement = "", x = all_data3$Country, fixed = T)
# create data sources for each metric
measures <- all_data3$Element %>% unique %>% as.character
measures <- c(measures[2], measures[4], measures[1], measures[3])
nicerNms <- c('calories', 'protein', 'fat', 'food_quantity')
lapply(1:length(measures), function(i){
subData <- all_data3 %>% dplyr::filter(Element == measures[i])
subData$Value <- round(subData$Value, 1)
subData$Country <- tolower(subData$Country)
subData$Country <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = subData$Country)
subData$Country <- gsub(pattern = ' ', replacement = '-', x = subData$Country)
subData$combination <- paste(subData$Country, '_', subData$Item, sep = '')
subData <- subData[c('Year', 'Value', 'combination')]
subData <- subData %>% spread(key = combination, value = Value)
colnames(subData)[1] <- 'year'
subData <- as.data.frame(subData)
colnames(subData)[ncol(subData)] <- paste(colnames(subData)[ncol(subData)], ',', sep = '')
subData[,ncol(subData)] <- paste(subData[,ncol(subData)], ',', sep='')
# write.delim(subData, paste(nicerNms[i], '.tsv', sep = ''))
write.csv(subData, file = paste('./_data_sources/crop/', nicerNms[i], '.csv', sep = ''), row.names = FALSE, quote = FALSE, sep = "|")
})
unique(all_data2$food_group)
unique(all_data2$Country)
g = gc()
rm(list = ls())
