?Sys.time
system.time(expr = dwld_comtrade(), gcFirst = TRUE)
system.time(expr = dwld_comtrade(), gcFirst = TRUE)
system.time(expr = {
jsonFile <- "http://comtrade.un.org/data/cache/reporterAreas.json"
repCountry <- fromJSON(file=jsonFile)
repCountry <- as.data.frame(do.call(rbind, repCountry[[2]]))
colnames(repCountry) <- c("code", "name")
subset(repCountry, name %in% c("Austria", "Bulgaria"))
comtradeURL <- "http://comtrade.un.org/api/get?"
ps <- "2010" # one year
r <- 100 # reporting country=Bulgaria
p <- 40 # partner = Austria
rg <- "all" # trade flow
cc <- "TOTAL" # total of all commodities
comtradeURL <- paste0(comtradeURL,
"ps=", ps, "&", # time period
"r=", r, "&", # reporting area
"p=", p, "&", # partner country
"rg=", rg, "&", # trade flow
"cc=", cc, "&", # commodities
"fmt=csv", # format is CSV
sep = "")
dd <- read.csv(comtradeURL, header=TRUE)
dd
}, gcFirst = TRUE)
options(warn = -1)
options(scipen = 999)
# Extracting codes and descriptions of reporters from the UN Comtrade API
suppressMessages(library(rjson))
suppressMessages(library(dplyr))
suppressMessages(library(plyr))
string <- "http://comtrade.un.org/data/cache/partnerAreas.json"
reporters2 <- rjson::fromJSON(file = string)
reporters2 <- as.data.frame(t(sapply(reporters2$results,rbind)))
reporters2 <- reporters2[-1,]
reporters <- data.frame(Code = unlist(reporters2$V1), Country = unlist(reporters2$V2)); rm(reporters2)
reporters$Code <- as.numeric(as.character(reporters$Code))
reporters$Country <- as.character(reporters$Country)
get.Comtrade <- function(url = "http://comtrade.un.org/api/get?", maxrec = 50000, type = "C", freq = "A",
px = "HS", ps = "now", r, p, rg = "all", cc = "TOTAL", fmt = "json"){
string<- paste(url
,"max=",maxrec,"&" # maximum no. of records returned
,"type=",type,"&"  # type of trade (c=commodities)
,"freq=",freq,"&"  # frequency
,"px=",px,"&"      # classification
,"ps=",ps,"&"      # time period
,"r=",r,"&"        # reporting area
,"p=",p,"&"        # partner country
,"rg=",rg,"&"      # trade flow (All = "all", imports = 1, exports = 2, re-export = 3)
,"cc=",cc,"&"      # classification code
,"fmt=",fmt        # Format
,sep = ""
)
if(fmt == "csv") {
raw.data<- read.csv(string,header=TRUE)
return(list(validation=NULL, data=raw.data))
} else {
if(fmt == "json" ) {
raw.data<- rjson::fromJSON(file = string)
data<- raw.data$dataset
validation<- unlist(raw.data$validation, recursive=TRUE)
ndata<- NULL
if(length(data)> 0) {
var.names<- names(data[[1]])
data<- as.data.frame(t( sapply(data,rbind)))
ndata<- NULL
for(i in 1:ncol(data)){
data[sapply(data[,i],is.null),i]<- NA
ndata<- cbind(ndata, unlist(data[,i]))
}
ndata<- as.data.frame(ndata)
colnames(ndata)<- var.names
}
return(list(validation=validation,data =ndata))
}
}
}
system.time(expr = {
get.Comtrade(r = "100", p = "40", cc = "TOTAL", ps = "2010", px = "HS", rg = "all")
}, gcFirst = TRUE)
system.time(expr = {
jsonFile <- "http://comtrade.un.org/data/cache/reporterAreas.json"
repCountry <- fromJSON(file=jsonFile)
repCountry <- as.data.frame(do.call(rbind, repCountry[[2]]))
colnames(repCountry) <- c("code", "name")
subset(repCountry, name %in% c("Austria", "Bulgaria"))
comtradeURL <- "http://comtrade.un.org/api/get?"
ps <- "2010" # one year
r <- 100 # reporting country=Bulgaria
p <- 40 # partner = Austria
rg <- "all" # trade flow
cc <- "TOTAL" # total of all commodities
comtradeURL <- paste0(comtradeURL,
"ps=", ps, "&", # time period
"r=", r, "&", # reporting area
"p=", p, "&", # partner country
"rg=", rg, "&", # trade flow
"cc=", cc, "&", # commodities
"fmt=csv", # format is CSV
sep = "")
dd <- read.csv(comtradeURL, header=TRUE)
dd
}, gcFirst = TRUE)
1/1.6
1/1.2
1/2
library(FactoMineR)
?MCA
data(tea)
View(tea)
res.mca <- MCA(tea,quanti.sup=19,quali.sup=20:36)
summary(res.mca)
res.mca <- MCA(tea,quanti.sup=19,quali.sup=20:36, graph = T)
View(res.mca$ind$coord)
g=gc()
hist(res.mca$ind$coord[,1])
hist(res.mca$ind$coord[,2])
hist(res.mca$ind$coord[,3])
hist(res.mca$ind$coord[,4])
hist(res.mca$ind$coord[,5])
hist(res.mca$var$coord)
(res.mca$var$coord)
g=gc()
rm(list=ls())
load("//dapadfs/workspace_cluster_3/bid-cc-agricultural-sector/08-Cells_toRun/Wheat.loc.cal.Rdat")
ls()
load("//dapadfs/workspace_cluster_3/bid-cc-agricultural-sector/08-Cells_toRun/Bean.loc.cal.Rdat")
ls()
install.packages(c("data.table", "e1071", "goftest"))
library(ggplot2)
library(sp)
library(rgdal)
library(rgeos)
localDir <- "R_GIS_data"
if (!file.exists(localDir)) {
dir.create(localDir)
}
url <- "ftp://www.ecy.wa.gov/gis_a/inlandWaters/wria.zip"
file <- paste(localDir, basename(url), sep='/')
if (!file.exists(file)) {
download.file(url, file)
unzip(file,exdir=localDir)
}
# create a layer name for the shapefiles (text before file extension)
layerName <- "WRIA_poly"
url <- "ftps://www.ecy.wa.gov/gis_a/inlandWaters/wria.zip"
file <- paste(localDir, basename(url), sep='/')
if (!file.exists(file)) {
download.file(url, file)
unzip(file,exdir=localDir)
}
# create a layer name for the shapefiles (text before file extension)
layerName <- "WRIA_poly"
library(rgdal)
shp_1860 <- readOGR("shp", "US_county_1860", stringsAsFactors = F)
summary(shp_1860)
library(rgdal)
latam <- readOGR("//dapadfs/workspace_cluster_3/bid-cc-agricultural-sector/03-Map_LatinAmerica/Latino_America.shp", layer="Latino_America")
latam.table <- fortify(latam)
View(latam.table)
?fortify
library(broom)
tidy.SpatialPolygonsDataFrame <- function (x, region = NULL, ...)
{
attr <- as.data.frame(x)
if (is.null(region)) {
coords <- ldply(x@polygons, tidy)
message("Regions defined for each Polygons")
}
else {
cp <- sp::polygons(x)
unioned <- maptools::unionSpatialPolygons(cp, attr[,
region])
coords <- tidy(unioned)
coords$order <- 1:nrow(coords)
}
coords
}
tidy.SpatialPolygonsDataFrame(latam)
tidy(latam)
tidy(latam)
system.time(expr = {latam.table <- fortify(latam)})
system.time(expr = {latam.table <- broom::tidy(latam)})
library(broom)
library(rgdal)
latam <- readOGR("//dapadfs/workspace_cluster_3/bid-cc-agricultural-sector/03-Map_LatinAmerica/Latino_America.shp", layer="Latino_America")
library(broom)
system.time(expr = {latam.table <- fortify(latam)})
library(ggplot2)
system.time(expr = {latam.table <- fortify(latam)})
system.time(expr = {latam.table <- broom::tidy(latam)})
View(latam.table)
system.time(expr = {latam.table <- fortify(latam)})
fortifyC <- cmpfun(fortify)
library(compiler)
fortifyC <- cmpfun(fortify)
fortifyC <- cmpfun(fortify)
system.time(expr = {latam.table <- fortifyC(latam)})
system.time(expr = {latam.table <- fortify(latam)})
system.time(expr = {latam.table <- broom::tidy(latam)})
fortifyC <- cmpfun(fortify)
system.time(expr = {latam.table <- fortifyC(latam)})
fortify
getAnywhere("fortify")
getAnywhere("fortify")[[1]]
getAnywhere("fortify")[[2]]
getAnywhere("fortify")[[3]]
tidyC <- cmpfun(broom::tidy)
system.time(expr = {latam.table <- tidyC(latam)})
install.packages(c("h2o", "pROC", "sjPlot", "sjstats"))
install.packages('SesIndexCreatoR')
install.packages(c("countrycode", "roxygen2"))
library(fractal)
model <- lmModel("ppl",alpha=-0.9)
model
lmConfidence(lmSimulate(model), model)
old.plt <- par("plt")
models <- c("ppl","fdp","fgn","dfbm")
for (i in seq(along=models)){
splitplot(2,2,i)
plot(lmSDF(lmModel(models[i])),
reference.grid=FALSE, log.axes="xy")
}
par(plt=old.plt)
g=gc()
rm(list=ls())
Sys.getenv('PATH')
grep(pattern = "Rtools", x = Sys.getenv('PATH'))
grep(pattern = "Common", x = Sys.getenv('PATH'))
Sys.getenv('PATH')
Sys.getenv('PATH')
grep(pattern = "Common", x = Sys.getenv('PATH'))
system('g++ -v')
system('where make')
install.packages("abn")
install.packages("gRain")
library(gRain)
source("https://bioconductor.org/biocLite.R")
biocLite("RBGL")
library(gRain)
install.packages("gR")
install.packages("deal")
library("deal", lib.loc="~/R/win-library/3.3")
setwd("D:/ToBackup/Modelling/bid-cc-agricultural-sector/Results/final_analyses/Historical/Rainfed")
Run <- read.csv("wheat_rainfed_results_ggcmi.csv")
gg <- Run %>% ggplot(aes(x = as.numeric(Pixel), y = as.numeric(HWAH), group = as.factor(Year), colour = Run_type)) + geom_point()
gg <- gg + facet_wrap(~ Cultivar) + theme_bw() + xlab('Pixel') + ylab('Yield (kg/ha)')
ggsave(filename = 'Wheat_diagnostic_vs_final_ggcmi.png', plot = gg, width = 15, height = 10, units = 'in')
options(warn = -1); options(scipen = 999)
library(ggplot2)
library(dplyr)
library(tidyr)
gg <- Run %>% ggplot(aes(x = as.numeric(Pixel), y = as.numeric(HWAH), group = as.factor(Year), colour = Run_type)) + geom_point()
gg <- gg + facet_wrap(~ Cultivar) + theme_bw() + xlab('Pixel') + ylab('Yield (kg/ha)')
ggsave(filename = 'Wheat_diagnostic_vs_final_ggcmi.png', plot = gg, width = 15, height = 10, units = 'in')
quantileFun <- function(x){z <- stats::quantile(x, probs=0.05); return(z)}
aux <- as.data.frame(dplyr::summarise(group_by(Run, Pixel, Cultivar, Run_type), quantileFun(HWAH)))
names(aux)[4] <- "p05"
quantileFun <- function(x){z <- stats::quantile(x, probs=0.50); return(z)}
aux1 <- as.data.frame(dplyr::summarise(group_by(Run, Pixel, Cultivar, Run_type), quantileFun(HWAH)))
names(aux1)[4] <- "p50"
quantileFun <- function(x){z <- stats::quantile(x, probs=0.90); return(z)}
aux2 <- as.data.frame(dplyr::summarise(group_by(Run, Pixel, Cultivar, Run_type), quantileFun(HWAH)))
names(aux2)[4] <- "p90"
aux <- merge(aux, aux1, by = c("Pixel", "Cultivar", "Run_type")); rm(aux1)
aux <- merge(aux, aux2, by = c("Pixel", "Cultivar", "Run_type")); rm(aux2)
gg <- aux %>% ggplot(aes(x = Pixel, y = p50, ymin = p05, ymax = p90, colour = Run_type))
gg <- gg + geom_linerange(position = position_dodge(width = c(0.6, 0.4)), size = 1, alpha = 0.5)
gg <- gg + geom_point(aes(color = Run_type, shape = Run_type), position = position_dodge(width = c(0.6, 0.4)), size = 3)
gg <- gg + facet_wrap(~ Cultivar) + theme_bw() + xlab('Pixel') + ylab('Yield (kg/ha)')
ggsave(filename = 'Wheat_diagnostic_vs_final_90interval_ggcmi.png', plot = gg, width = 15, height = 10, units = 'in')
g=gc()
rm(list=ls())
setwd("~")
list.files()
setwd("~/GitHub/cwr_changing_global_diet/r_script/data")
options(warn = -1)
options(scipen = 999)
# load packages
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(ggplot2))
suppressMessages(library(caroline))
suppressMessages(library(purrr))
suppressMessages(library(broom))
suppressMessages(library(ggplot2))
suppressMessages(library(epanetReader))
suppressMessages(library(ff))
suppressMessages(library(ffbase))
all_data <- read.csv('all_1961_2009_final_analysis_data_final_2016_10_28.csv')
gFood <- read.csv('FBS_commodities_foodgroups_regions_finaltest.csv')
gFood <- gFood %>% dplyr::select(Item:food_group) %>% unique
# merging global diet and food groups data
all_data2 <- dplyr::left_join(all_data, gFood, by=c('Item'))
rm(all_data, gFood)
# reshape dataset
all_data2 <- all_data2 %>% tidyr::gather(Year, Value, Y1961:Y2009)
all_data2$Year <- as.numeric(gsub(pattern='Y', replacement='', x=all_data2$Year))
all_data3 <- all_data2
# change group name
all_data3$food_group <- tolower(gsub(pattern = ' ', replacement = '_', x = all_data3$food_group))
all_data3$Item <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = all_data3$Item)
all_data3$Item <- tolower(gsub(pattern = ' ', replacement = '_', x = all_data3$Item))
all_data3$Item <- tolower(gsub(pattern = ',', replacement = '', x = all_data3$Item))
all_data3$Item <- gsub(pattern = '\\_$', replacement = '', x = all_data3$Item)
all_data3$Item <- gsub(pattern = '\\&', replacement = 'and', x = all_data3$Item)
all_data3$Country <- as.character(all_data3$Country)
all_data3$Country[grep(pattern = "Côte d'Ivoire", x = all_data3$Country, fixed = TRUE)] <- 'Ivory Coast'
all_data3$Country <- tolower(all_data3$Country)
all_data3$Country <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = all_data3$Country)
all_data3$Country <- gsub(pattern = ' ', replacement = '_', x = all_data3$Country)
all_data3$Country <- gsub(pattern = "\\'", replacement = '', x = all_data3$Country)
countries <- all_data3$Country %>% unique %>% as.character %>% sort
elements  <- all_data3$Element %>% unique %>% as.character %>% sort
nicerNms <- c('fat', 'calories', 'food_quantity', 'protein')
write.csv(data.frame(Country = countries), file = paste(getwd(), "/_data_sources/country_food_group_crop/countryList.csv", sep = ""), row.names = FALSE)
countries <- all_data3$Country %>% unique %>% as.character %>% sort
elements  <- all_data3$Element %>% unique %>% as.character %>% sort
nicerNms <- c('fat', 'calories', 'food_quantity', 'protein')
write.csv(data.frame(Country = countries), file = paste(getwd(), "/_data_sources/country_food_group_crop/countryList.csv", sep = ""), row.names = FALSE)
lapply(1:length(elements), function(i){
elementData <- all_data3 %>% dplyr::filter(Element == elements[i])
element_dir <- paste(getwd(), "/_data_sources/country_food_group_crop/", nicerNms[i], sep = "")
if(!dir.exists(element_dir)){dir.create(path = element_dir, showWarnings = FALSE, recursive = TRUE)}
lapply(1:length(countries), function(j){
countryData <- elementData %>% dplyr::filter(Country == countries[j])
countryData$Value <- round(countryData$Value, 1)
countryData$combination <- paste(countryData$food_group, "_", countryData$Item, sep = "")
countryData <- countryData[c("Year", "Value", "combination")]
countryData <- countryData %>% spread(key = combination, value = Value)
colnames(countryData)[1] <- "year"
countryData <- as.data.frame(countryData)
# colnames(countryData)[ncol(countryData)] <- paste(colnames(countryData)[ncol(countryData)], ",", sep = "")
# countryData[,ncol(countryData)] <- paste(countryData[,ncol(countryData)], ",", sep = "")
# write.delim(subData, paste(nicerNms[i], '.tsv', sep = ''))
write.csv(countryData, file = paste(element_dir, "/", countries[j], ".csv", sep = ""), row.names = FALSE, sep = "|", quote = FALSE)
})
})
g=gc()
rm(list=ls())
measures <- all_data3$Element %>% unique %>% as.character
nicerNms <- c('fat', 'calories', 'food_quantity', 'protein')
lapply(1:length(measures), function(i){
subData <- all_data3 %>% dplyr::filter(Element == measures[i])
subData$Value <- round(subData$Value, 1)
subData$Country <- tolower(subData$Country)
subData$Country <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = subData$Country)
subData$Country <- gsub(pattern = ' ', replacement = '-', x = subData$Country)
subData$combination <- paste(subData$Country, '_', subData$food_group, sep = '')
subData <- subData[c('Year', 'Value', 'combination')]
subData <- subData %>% spread(key = combination, value = Value)
colnames(subData)[1] <- 'year'
subData <- as.data.frame(subData)
colnames(subData)[ncol(subData)] <- paste(colnames(subData)[ncol(subData)], ',', sep = '')
subData[,ncol(subData)] <- paste(subData[,ncol(subData)], ',', sep='')
# write.delim(subData, paste(nicerNms[i], '.tsv', sep = ''))
write.csv(subData, file = paste('./_data_sources/global/global2/', nicerNms[i], '.csv', sep = ''), row.names = FALSE, quote = FALSE, sep = "|")
})
options(warn = -1)
options(scipen = 999)
# load packages
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(ggplot2))
suppressMessages(library(caroline))
suppressMessages(library(purrr))
suppressMessages(library(broom))
suppressMessages(library(ggplot2))
suppressMessages(library(epanetReader))
suppressMessages(library(ff))
suppressMessages(library(ffbase))
# load global diet data
# It's better to use Sara's data: CropData_longform.rpt (PENDING)
all_data <- read.csv('all_1961_2009_final_analysis_data_final_2016_10_28.csv')
# load food groups
gFood <- read.csv('FBS_commodities_foodgroups_regions_finaltest.csv')
gFood <- gFood %>% dplyr::select(Item:food_group) %>% unique
# merging global diet and food groups data
all_data2 <- dplyr::left_join(all_data, gFood, by=c('Item'))
rm(all_data, gFood)
# reshape dataset
all_data2 <- all_data2 %>% tidyr::gather(Year, Value, Y1961:Y2009)
all_data2$Year <- as.numeric(gsub(pattern='Y', replacement='', x=all_data2$Year))
# create data sources
all_data3 <- all_data2 %>% group_by(Country, Element, Unit, food_group, Year) %>% summarise(sum(Value))
names(all_data3)[ncol(all_data3)] <- 'Value'
# change group name
all_data3$food_group <- tolower(gsub(pattern = ' ', replacement = '_', x = all_data3$food_group))
all_data3$Country <- as.character(all_data3$Country)
all_data3$Country[grep(pattern = "Côte d'Ivoire", x = all_data3$Country, fixed = TRUE)] <- 'Ivory Coast'
measures <- all_data3$Element %>% unique %>% as.character
nicerNms <- c('fat', 'calories', 'food_quantity', 'protein')
lapply(1:length(measures), function(i){
subData <- all_data3 %>% dplyr::filter(Element == measures[i])
subData$Value <- round(subData$Value, 1)
subData$Country <- tolower(subData$Country)
subData$Country <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = subData$Country)
subData$Country <- gsub(pattern = ' ', replacement = '-', x = subData$Country)
subData$combination <- paste(subData$Country, '_', subData$food_group, sep = '')
subData <- subData[c('Year', 'Value', 'combination')]
subData <- subData %>% spread(key = combination, value = Value)
colnames(subData)[1] <- 'year'
subData <- as.data.frame(subData)
colnames(subData)[ncol(subData)] <- paste(colnames(subData)[ncol(subData)], ',', sep = '')
subData[,ncol(subData)] <- paste(subData[,ncol(subData)], ',', sep='')
# write.delim(subData, paste(nicerNms[i], '.tsv', sep = ''))
write.csv(subData, file = paste('./_data_sources/global/global2/', nicerNms[i], '.csv', sep = ''), row.names = FALSE, quote = FALSE, sep = "|")
})
all_data3 <- all_data2
all_data3$food_group <- tolower(gsub(pattern = ' ', replacement = '-', x = all_data3$food_group)) # It was "_" originally
all_data3$Item <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = all_data3$Item)
all_data3$Item <- tolower(gsub(pattern = ' ', replacement = '_', x = all_data3$Item))
all_data3$Item <- tolower(gsub(pattern = ',', replacement = '', x = all_data3$Item))
all_data3$Item <- gsub(pattern = '\\_$', replacement = '', x = all_data3$Item)
all_data3$Item <- gsub(pattern = '\\&', replacement = 'and', x = all_data3$Item)
all_data3$Country <- as.character(all_data3$Country)
all_data3$Country[grep(pattern = "Côte d'Ivoire", x = all_data3$Country, fixed = TRUE)] <- 'Ivory Coast'
all_data3$Country <- tolower(all_data3$Country)
all_data3$Country <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = all_data3$Country)
all_data3$Country <- gsub(pattern = ' ', replacement = '_', x = all_data3$Country)
all_data3$Country <- gsub(pattern = "\\'", replacement = '', x = all_data3$Country)
measures <- all_data3$Element %>% unique %>% as.character
nicerNms <- c('fat', 'calories', 'food_quantity', 'protein')
lapply(1:length(measures), function(i){
subData <- all_data3 %>% dplyr::filter(Element == measures[i])
subData$Value <- round(subData$Value, 1)
subData$combination <- paste(subData$food_group, '_', subData$Item, sep = '')
subData <- subData[c('Year', 'Value', 'combination')]
subData <- subData %>% spread(key = combination, value = Value)
colnames(subData)[1] <- 'year'
subData <- as.data.frame(subData)
# colnames(subData)[ncol(subData)] <- paste(colnames(subData)[ncol(subData)], ',', sep = '')
# subData[,ncol(subData)] <- paste(subData[,ncol(subData)], ',', sep='')
# write.delim(subData, paste(nicerNms[i], '.tsv', sep = ''))
write.csv(subData, file = paste('./_data_sources/global/global2/', nicerNms[i], '.csv', sep = ''), row.names = FALSE, quote = FALSE, sep = "|")
})
all_data3 <- all_data2 %>% group_by(Item, Element, Unit, food_group, Year) %>% summarise(mean(Value))
names(all_data3)[ncol(all_data3)] <- 'Value'
# change group name
all_data3$food_group <- tolower(gsub(pattern = ' ', replacement = '-', x = all_data3$food_group)) # It was "_" originally
all_data3$Item <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = all_data3$Item)
all_data3$Item <- tolower(gsub(pattern = ' ', replacement = '-', x = all_data3$Item))
all_data3$Item <- tolower(gsub(pattern = ',', replacement = '', x = all_data3$Item))
all_data3$Item <- gsub(pattern = '\\-$', replacement = '', x = all_data3$Item)
all_data3$Item <- gsub(pattern = '\\&', replacement = 'and', x = all_data3$Item)
# create data sources for each metric
measures <- all_data3$Element %>% unique %>% as.character
nicerNms <- c('fat', 'calories', 'food_quantity', 'protein')
lapply(1:length(measures), function(i){
subData <- all_data3 %>% dplyr::filter(Element == measures[i])
subData$Value <- round(subData$Value, 1)
subData$combination <- paste(subData$food_group, '_', subData$Item, sep = '')
subData <- subData[c('Year', 'Value', 'combination')]
subData <- subData %>% spread(key = combination, value = Value)
colnames(subData)[1] <- 'year'
subData <- as.data.frame(subData)
colnames(subData)[ncol(subData)] <- paste(colnames(subData)[ncol(subData)], ',', sep = '')
subData[,ncol(subData)] <- paste(subData[,ncol(subData)], ',', sep='')
# write.delim(subData, paste(nicerNms[i], '.tsv', sep = ''))
write.csv(subData, file = paste('./_data_sources/global/global2/', nicerNms[i], '.csv', sep = ''), row.names = FALSE, sep = "|")
})
all_data3 <- all_data2 %>% group_by(Item, Element, Unit, food_group, Year) %>% summarise(mean(Value))
names(all_data3)[ncol(all_data3)] <- 'Value'
# change group name
all_data3$food_group <- tolower(gsub(pattern = ' ', replacement = '-', x = all_data3$food_group)) # It was "_" originally
all_data3$Item <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = all_data3$Item)
all_data3$Item <- tolower(gsub(pattern = ' ', replacement = '_', x = all_data3$Item)) # It was "-" originally
all_data3$Item <- tolower(gsub(pattern = ',', replacement = '', x = all_data3$Item))
all_data3$Item <- gsub(pattern = '\\-$', replacement = '', x = all_data3$Item)
all_data3$Item <- gsub(pattern = '\\&', replacement = 'and', x = all_data3$Item)
# create data sources for each metric
measures <- all_data3$Element %>% unique %>% as.character
nicerNms <- c('fat', 'calories', 'food_quantity', 'protein')
lapply(1:length(measures), function(i){
subData <- all_data3 %>% dplyr::filter(Element == measures[i])
subData$Value <- round(subData$Value, 1)
subData$combination <- paste(subData$food_group, '_', subData$Item, sep = '')
subData <- subData[c('Year', 'Value', 'combination')]
subData <- subData %>% spread(key = combination, value = Value)
colnames(subData)[1] <- 'year'
subData <- as.data.frame(subData)
colnames(subData)[ncol(subData)] <- paste(colnames(subData)[ncol(subData)], ',', sep = '')
subData[,ncol(subData)] <- paste(subData[,ncol(subData)], ',', sep='')
# write.delim(subData, paste(nicerNms[i], '.tsv', sep = ''))
write.csv(subData, file = paste('./_data_sources/global/global2/', nicerNms[i], '.csv', sep = ''), row.names = FALSE, sep = "|")
})
all_data3 <- all_data2 %>% group_by(Item, Element, Unit, food_group, Year) %>% summarise(mean(Value))
names(all_data3)[ncol(all_data3)] <- 'Value'
# change group name
all_data3$food_group <- tolower(gsub(pattern = ' ', replacement = '-', x = all_data3$food_group)) # It was "_" originally
all_data3$Item <- gsub(pattern = '* \\((.*?)\\)', replacement = '', x = all_data3$Item)
all_data3$Item <- tolower(gsub(pattern = ' ', replacement = '_', x = all_data3$Item)) # It was "-" originally
all_data3$Item <- tolower(gsub(pattern = ',', replacement = '', x = all_data3$Item))
all_data3$Item <- gsub(pattern = '\\-$', replacement = '', x = all_data3$Item)
all_data3$Item <- gsub(pattern = '\\&', replacement = 'and', x = all_data3$Item)
# create data sources for each metric
measures <- all_data3$Element %>% unique %>% as.character
nicerNms <- c('fat', 'calories', 'food_quantity', 'protein')
lapply(1:length(measures), function(i){
subData <- all_data3 %>% dplyr::filter(Element == measures[i])
subData$Value <- round(subData$Value, 1)
subData$combination <- paste(subData$food_group, '_', subData$Item, sep = '')
subData <- subData[c('Year', 'Value', 'combination')]
subData <- subData %>% spread(key = combination, value = Value)
colnames(subData)[1] <- 'year'
subData <- as.data.frame(subData)
# colnames(subData)[ncol(subData)] <- paste(colnames(subData)[ncol(subData)], ',', sep = '')
# subData[,ncol(subData)] <- paste(subData[,ncol(subData)], ',', sep='')
# write.delim(subData, paste(nicerNms[i], '.tsv', sep = ''))
write.csv(subData, file = paste('./_data_sources/global/global2/', nicerNms[i], '.csv', sep = ''), row.names = FALSE, quote = FALSE, sep = "|")
})
